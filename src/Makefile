#
# Makefile for Vim on Unix
#

# There are three types of defines:
#
# 1. configuration dependend
#	Used for "make install". Adjust the path names and protections
#	to your desire (not required).
#
# 2. various choices
#	Can be changed to match your compiler or your preferences (not
#	required).
#
# 3. hardware dependend
#	If you machine is in the list, remove one '#' in front of the defines
#	following it. Otherwise: Find a machine that is similar and change the
#	defines to make it work (REQUIRED).
#
# tested configurations:
# Sun 4.1.x with cc and gcc	(jw)
# Sun 4.1.3_U1 with gcc 2.5.8
# ULTRIX 4.2A with cc and gcc
# HPUX with cc and gcc		(jw)
# SINX-L with cc
# Linux with gcc		(jw)
# IRIX 4.0			(jw)
# AIX on rs6000			(jw)
# Sun OS 5.3 (Solaris)		(jw)
# RISCos - MIPS			(jw)
# SVR3 (on MOT188)		(jw)
# Sequent/ptx			(jw)

# configurations marked by (jw) have been tested by Juergen Weigert:
#    jnweiger@uni-erlangen.de

#
# PART 1: configuration dependend
#

### Prefix for location of files
PREFIX = $(PWD)/out

### Location of binary
BINLOC = $(PREFIX)/bin

### Name of target
TARGET = vim

### Location of man page
MANLOC = $(PREFIX)/man/man1

### Location of help file
HELPLOC = $(PREFIX)/lib

### Permissions for vim binary
BINMOD = 755

### Permissions for man page
MANMOD = 644

### Permissions for help file
HELPMOD = 644

MANFILE = ../doc/vim.1

HELPFILE = ../doc/vim.hlp

#
# PART 2: various choices
#

### -DDIGRAPHS		digraph support
### -DNO_FREE_NULL	do not call free() with a null pointer
### -DCOMPATIBLE	start in vi-compatible mode
### -DNOBACKUP		default is no backup file
### -DDEBUG		output a lot of debugging garbage
### -DSTRNCASECMP	use strncasecmp() instead of internal function
### -DUSE_LOCALE	use setlocale() to change ctype() and others
### -DTERMCAP		full termcap/terminfo file support
### -DTERMINFO		use terminfo instead of termcap entries for builtin terms
### -DNO_BUILTIN_TCAPS	do not include builtin termcap entries
###				(use only with -DTERMCAP)
### -DSOME_BUILTIN_TCAPS include most useful builtin termcap entries
###				(use only without -DNO_BUILTIN_TCAPS)
### -DALL_BUILTIN_TCAPS	include all builtin termcap entries
###				(use only without -DNO_BUILTIN_TCAPS)
### -DMAXNAMLEN 31	maximum length of a file name (if not defined in sys/dir.h)
### -Dconst=		for compilers that don't have type const
### -DVIMRC_FILE=name		name of the .vimrc file in current dir
### -DEXRC_FILE=name		name of the .exrc file in current dir
### -DSYSVIMRC_FILE=name	name of the global .vimrc file
### -DSYSEXRC_FILE=name		name of the global .exrc file
### -DDEFVIMRC_FILE=name	name of the system-wide .vimrc file
### -DVIM_HLP=name		name of the help file
### -DUSE_SYSTEM	use system() instead of fork/exec for starting a shell
### -DVIM_ISSPACE	use when isspace() can't handle meta chars
### -DNOLIMITS		limits.h does not exist
### -DNOSTDLIB		stdlib.h does not exist
### -DUSE_X11		include code for xterm title saving
DEFS = -DDIGRAPHS -DTERMCAP -DSOME_BUILTIN_TCAPS -DNO_FREE_NULL -DVIM_ISSPACE\
	-DVIM_HLP=\"$(HELPLOC)/vim.hlp\"

#
# PART 3: hardware dependend
#

# generic for Sun, NeXT, POSIX and SYSV R4 (?) (TESTED for Sun 4.1.x)
# standard cc with optimizer
#
#MACHINE = -DBSD_UNIX -DUSE_LOCALE -DUSE_X11
#CC=cc -O -L/usr/openwin/lib
#LIBS = -ltermlib -lX11

# generic for Sun, NeXT, POSIX and SYSV R4 (?) (TESTED for Sun 4.1.x)
# without x11 code
# standard cc with optimizer
#
#MACHINE = -DBSD_UNIX -DUSE_LOCALE
#CC=cc -O
#LIBS = -ltermlib

# like generic, but with termcap, for Linux, NeXT and others (NOT TESTED YET)
# standard cc with optimizer
#
#MACHINE = -DBSD_UNIX
#CC=cc -O
#LIBS = -ltermcap

# like generic, but with debugging (NOT TESTED YET)
#
#MACHINE = -DBSD_UNIX
#CC=cc -g
#LIBS = -ltermlib

# like generic, but with gcc (TESTED on Sun 4.1.x, ULTRIX 4.2A on MIPS)
#
#MACHINE = -DBSD_UNIX -DUSE_LOCALE
#CC=gcc -O -Wall -traditional -Dconst=
#LIBS = -ltermlib

# like generic, but with gcc 2.5.8 (TESTED on Sun 4.1.3_U1)
#
#MACHINE = -DBSD_UNIX -DUSE_LOCALE
#CC=gcc -O1000
#LIBS = -ltermlib

# standard cc with optimizer for ULTRIX 4.2A on MIPS (TESTED)
#
#MACHINE = -DBSD_UNIX -DUSE_LOCALE
#CC=cc -O -Olimit 1500
#LIBS = -ltermlib

# GCC (2.2.2d) on Linux (1.0.9) (TESTED)
#
MACHINE = -DBSD_UNIX
CC=gcc -O0 -Wall
LIBS = -ltermcap

# Apollo DOMAIN (with SYSTYPE = bsd4.3) (NOT TESTED YET)
#
#MACHINE = -DBSD_UNIX -DDOMAIN
#CC=cc -O -A systype,bsd4.3
#LIBS = -ltermlib

# IRIX 4.0 (Silicon Graphics Indigo, __sgi will be defined) (TESTED)
#
#MACHINE = -DBSD_UNIX
#CC=cc -O
#LIBS = -ltermlib -lmalloc -lc_s

# HPUX (TESTED) (hpux is defined)
# With xterm support
#
#MACHINE = -DBSD_UNIX -DTERMINFO -DUSE_X11
#CC=cc -O -I/usr/include/X11R5 -L/usr/lib/X11R5
#LIBS = -ltermcap -lX11

# HPUX (TESTED) (hpux is defined)
#
#MACHINE = -DBSD_UNIX -DTERMINFO
#CC=cc -O
#LIBS = -ltermcap

# HPUX with gcc (TESTED) (hpux is defined)
#
#MACHINE = -DBSD_UNIX -DTERMINFO
#CC=gcc -O
#LIBS = -ltermcap

# Convex (NOT TESTED YET)
#
#MACHINE = -DBSD_UNIX -DCONVEX
#CC=cc -O
#LIBS = -ltermcap

# generic SYSV_UNIX for Dynix/PTX and SYSV R3 (and R4?) (TESTED on SINX-L)
# (TESTED on MOT188) (TESTED on Sequent/ptx)
#
#MACHINE = -DSYSV_UNIX
#CC=cc -O
#LIBS = -ltermlib

# SCO Xenix (NOT TESTED YET)
#
#MACHINE = -DSYSV_UNIX -DSCO
#CC=cc -O
#LIBS = -ltermlib

# GCC on SCO 3.2 (TESTED by jos@oce.nl)
# cc works too.
#
#MACHINE = -DSYSV_UNIX -UM_XENIX -DSCO
#CC=gcc -O -Wall
#LIBS = -ltinfo

# GCC on another SCO Unix (NOT TESTED YET)
#
#MACHINE = -DSYSV_UNIX -UM_XENIX -DSCO
#CC=gcc -O6 -g -fpcc-struct-return -fwritable-strings
#LIBS = -ltermlib -lmalloc

# Dynix with gcc (NOT TESTED YET)
#
#MACHINE = -DSYSV_UNIX
#CC=gcc -O -Wall -traditional
#LIBS = -ltermlib

# SOLARIS with X11 (TESTED)
#
#MACHINE = -DSYSV_UNIX -DSOLARIS -DTERMINFO -DUSE_X11
#CC=cc -O -Xa -v -R/usr/openwin/lib -L/usr/openwin/lib
#LIBS = -ltermlib -lX11

# SOLARIS (also works for Esix 4.0.3, SYSV R4?) (TESTED on Sun OS 5.3)
#
#MACHINE = -DSYSV_UNIX -DSOLARIS -DTERMINFO
#CC=cc -O -Xa -v
#LIBS = -ltermlib

# UNICOS (NOT TESTED YET)
#
#MACHINE = -DSYSV_UNIX -DUNICOS
#CC=cc -O
#LIBS = -ltermlib

# AIX (rs6000) (TESTED)
#
#MACHINE = -DSYSV_UNIX -DAIX
#CC=cc -O
#LIBS=-lcur

# UTS2 for Amdahl UTS 2.1.x (disable termcap below) (NOT TESTED YET)
#
#MACHINE = -DSYSV_UNIX -DUTS2
#CC=cc -O
#LIBS = -ltermlib -lsocket

# UTS4 for Amdahl UTS 4.x (NOT TESTED YET)
#
#MACHINE = -DSYSV_UNIX -DUTS4 -Xa
#CC=cc -O
#LIBS = -ltermlib

# USL for Unix Systems Laboratories (SYSV 4.2) (NOT TESTED YET)
#
#MACHINE = -DSYSV_UNIX -DUSL
#CC=cc -O
#LIBS = -ltermlib

# RISCos on MIPS (TESTED)
#
#MACHINE = -DSYSV_UNIX -DMIPS
#CC=cc -O
#LIBS = -ltermlib

################################################
##   no changes required below this line      ##
################################################

CFLAGS = -c -g3 -pg $(MACHINE) $(DEFS)

INCL = vim.h globals.h param.h keymap.h macros.h ascii.h term.h unix.h structs.h proto.h

OBJ =	obj/alloc.o obj/unix.o obj/buffer.o obj/charset.o obj/cmdcmds.o obj/cmdline.o \
	obj/csearch.o obj/digraph.o obj/edit.o obj/fileio.o obj/filelist.o obj/getchar.o obj/help.o \
	obj/linefunc.o obj/main.o obj/mark.o obj/memfile.o obj/memline.o obj/message.o obj/misccmds.o \
	obj/normal.o obj/ops.o obj/param.o obj/quickfix.o obj/regexp.o \
	obj/regsub.o obj/screen.o obj/search.o \
	obj/tag.o obj/term.o obj/undo.o obj/window.o $(TERMLIB)

$(TARGET): obj $(OBJ) version.c
	$(CC) $(CFLAGS) version.c
	mv -f version.o obj
	$(CC) -o $(TARGET) $(OBJ) obj/version.o $(LIBS)

debug: obj $(OBJ) version.c
	$(CC) $(CFLAGS) version.c
	mv -f version.o obj
	$(CC) -o $(TARGET) -g $(OBJ) obj/version.o $(LIBS)

# create the 'obj' directory if it doesn't exist
obj:
	test -d obj || mkdir obj

ctags:
	tags *.c *.h

install: $(TARGET)
	-mkdir -p $(BINLOC)
	cp $(TARGET) $(BINLOC)
	chmod $(BINMOD) $(BINLOC)/$(TARGET)

#-mkdir -p $(MANLOC)
#cp $(MANFILE) $(MANLOC)
#chmod $(MANMOD) $(MANLOC)/vim.1
#-mkdir -p $(HELPLOC)
#cp $(HELPFILE) $(HELPLOC)
#chmod $(HELPMOD) $(HELPLOC)/vim.hlp

clean:
	-rm -f $(OBJ) obj/mkcmdtab.o obj/version.o core $(TARGET) mkcmdtab cmdtab.h
	-rm -f *.bak

#use this in case the files have been transported via an MSDOS system

FILES = *.c *.h makefile makefile.* cmdtab.tab proto/*.pro tags

dos2unix:
	-mv arp_prot.h arp_proto.h
	-mv ptx_stdl.h ptx_stdlib.h
	-mv sun_stdl.h sun_stdlib.h
	-mv makefile.dic makefile.dice
	-mv makefile.uni makefile.unix
	-mv makefile.man makefile.manx
	-mv makefile.6sa makefile.6sas
	-mv makefile.5sa makefile.5sas
	for i in $(FILES); do tr -d '\r\032' < $$i > ~tmp~; mv ~tmp~ $$i; echo $$i; done

###########################################################################

obj/alloc.o:	alloc.c  $(INCL)
	$(CC) $(CFLAGS) alloc.c
	mv -f alloc.o obj

obj/unix.o:	unix.c  $(INCL)
	$(CC) $(CFLAGS) unix.c
	mv -f unix.o obj

obj/buffer.o:	buffer.c  $(INCL)
	$(CC) $(CFLAGS) buffer.c
	mv -f buffer.o obj

obj/charset.o:	charset.c  $(INCL)
	$(CC) $(CFLAGS) charset.c
	mv -f charset.o obj

obj/cmdcmds.o:	cmdcmds.c  $(INCL)
	$(CC) $(CFLAGS) cmdcmds.c
	mv -f cmdcmds.o obj

obj/cmdline.o:	cmdline.c  $(INCL) cmdtab.h ops.h
	$(CC) $(CFLAGS) cmdline.c
	mv -f cmdline.o obj

obj/csearch.o:	csearch.c  $(INCL)
	$(CC) $(CFLAGS) csearch.c
	mv -f csearch.o obj

obj/digraph.o:	digraph.c  $(INCL)
	$(CC) $(CFLAGS) digraph.c
	mv -f digraph.o obj

obj/edit.o:	edit.c  $(INCL) ops.h
	$(CC) $(CFLAGS) edit.c
	mv -f edit.o obj

obj/fileio.o:	fileio.c  $(INCL)
	$(CC) $(CFLAGS) fileio.c
	mv -f fileio.o obj

obj/filelist.o:	filelist.c  $(INCL)
	$(CC) $(CFLAGS) filelist.c
	mv -f filelist.o obj

obj/getchar.o:	getchar.c  $(INCL)
	$(CC) $(CFLAGS) getchar.c
	mv -f getchar.o obj

obj/help.o:	help.c  $(INCL)
	$(CC) $(CFLAGS) help.c
	mv -f help.o obj

obj/linefunc.o:	linefunc.c  $(INCL)
	$(CC) $(CFLAGS) linefunc.c
	mv -f linefunc.o obj

obj/main.o:	main.c  $(INCL)
	$(CC) $(CFLAGS) main.c
	mv -f main.o obj

obj/mark.o:	mark.c  $(INCL)
	$(CC) $(CFLAGS) mark.c
	mv -f mark.o obj

obj/memfile.o:	memfile.c  $(INCL)
	$(CC) $(CFLAGS) memfile.c
	mv -f memfile.o obj

obj/memline.o:	memline.c  $(INCL)
	$(CC) $(CFLAGS) memline.c
	mv -f memline.o obj

obj/message.o:	message.c  $(INCL)
	$(CC) $(CFLAGS) message.c
	mv -f message.o obj

obj/misccmds.o:	misccmds.c  $(INCL)
	$(CC) $(CFLAGS) misccmds.c
	mv -f misccmds.o obj

obj/normal.o:	normal.c  $(INCL) ops.h
	$(CC) $(CFLAGS) normal.c
	mv -f normal.o obj

obj/ops.o:	ops.c  $(INCL) ops.h
	$(CC) $(CFLAGS) ops.c
	mv -f ops.o obj

obj/param.o:	param.c  $(INCL)
	$(CC) $(CFLAGS) param.c
	mv -f param.o obj

obj/quickfix.o:	quickfix.c  $(INCL)
	$(CC) $(CFLAGS) quickfix.c
	mv -f quickfix.o obj

obj/regexp.o:	regexp.c  $(INCL)
	$(CC) $(CFLAGS) regexp.c
	mv -f regexp.o obj

obj/regsub.o:	regsub.c  $(INCL)
	$(CC) $(CFLAGS) regsub.c
	mv -f regsub.o obj

obj/screen.o:	screen.c  $(INCL)
	$(CC) $(CFLAGS) screen.c
	mv -f screen.o obj

obj/search.o:	search.c  $(INCL) ops.h
	$(CC) $(CFLAGS) search.c
	mv -f search.o obj

obj/tag.o:	tag.c  $(INCL)
	$(CC) $(CFLAGS) tag.c
	mv -f tag.o obj

obj/term.o:	term.c  $(INCL)
	$(CC) $(CFLAGS) term.c
	mv -f term.o obj

obj/undo.o:	undo.c  $(INCL)
	$(CC) $(CFLAGS) undo.c
	mv -f undo.o obj

obj/window.o:	window.c  $(INCL)
	$(CC) $(CFLAGS) window.c
	mv -f window.o obj

cmdtab.h: cmdtab.tab mkcmdtab
	./mkcmdtab cmdtab.tab cmdtab.h

mkcmdtab: obj/mkcmdtab.o
	$(CC) -o mkcmdtab obj/mkcmdtab.o

obj/mkcmdtab.o: mkcmdtab.c
	$(CC) $(CFLAGS) mkcmdtab.c
	mv -f mkcmdtab.o obj
